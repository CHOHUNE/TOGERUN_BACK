name: Java CI/CD with Gradle

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant Execute Permission For Gradlew
        run: chmod +x gradlew

      - name: Create and verify application.yml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 -d > application.yml
          echo "Created application.yml:"
          cat application.yml
          echo "Directory contents:"
          ls -la

      - name: Build with Gradle
        run: ./gradlew build --info

      - name: Check build results
        run: |
          echo "Listing build directory:"
          ls -la build/libs/
          echo "Checking JAR contents:"
          for jar in build/libs/*.jar; do
            echo "Contents of $jar:"
            jar tf "$jar" | grep -i yml || echo "No yml files found in $jar"
          done

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create build context
        run: |
          mkdir -p docker-build
          cp build/libs/*.jar docker-build/
          mkdir -p docker-build/src/main/resources
          cp src/main/resources/application.yml docker-build/src/main/resources/
          cp Dockerfile docker-build/

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: docker-build
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/spring:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          PUBLIC_IP_V4: ${{ secrets.PUBLIC_IP_V4 }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          envs: DOCKER_USERNAME,RDS_ENDPOINT,DB_NAME,DB_USERNAME,DB_PASSWORD,REDIS_HOST,REDIS_PORT,PUBLIC_IP_V4,JWT_SECRET_KEY
          script: |
            # Create backup directory
            mkdir -p ~/backups
            
            # Backup existing files if they exist
            if [ -f docker-compose.yml ]; then
              cp docker-compose.yml ~/backups/docker-compose.yml.$(date +%Y%m%d_%H%M%S)
              echo "Created backup of existing docker-compose.yml"
            fi
            
            if [ -f nginx.conf ]; then
              cp nginx.conf ~/backups/nginx.conf.$(date +%Y%m%d_%H%M%S)
              echo "Created backup of existing nginx.conf"
            fi
            
            # Update .env file with latest values
            cat << EOF > .env
            DOCKER_USERNAME=${DOCKER_USERNAME}
            RDS_ENDPOINT=${RDS_ENDPOINT}
            DB_NAME=${DB_NAME}
            DB_USERNAME=${DB_USERNAME}
            DB_PASSWORD=${DB_PASSWORD}
            REDIS_HOST=${REDIS_HOST}
            REDIS_PORT=${REDIS_PORT}
            PUBLIC_IP_V4=${PUBLIC_IP_V4}
            JWT_SECRET_KEY=${JWT_SECRET_KEY}
            EOF
            
            # Create docker-compose.yml
            cat << EOF > docker-compose.yml
            version: '3'
            
            services:
              nginx:
                image: nginx:alpine
                container_name: nginx
                ports:
                  - "80:80"
                volumes:
                  - ./nginx.conf:/etc/nginx/nginx.conf:ro
                depends_on:
                  - spring-boot-1
                  - spring-boot-2
                  - spring-boot-3
                networks:
                  - ubuntu_this_network
                restart: always
            
              spring-boot-1: &spring-service
                container_name: spring-boot-1
                image: \${DOCKER_USERNAME}/spring:latest
                expose:
                  - "8080"
                depends_on:
                  - redis
                environment:
                  SPRING_DATASOURCE_URL: \${RDS_ENDPOINT}/chat_app
                  SPRING_DATASOURCE_USERNAME: \${DB_USERNAME}
                  SPRING_DATASOURCE_PASSWORD: \${DB_PASSWORD}
                  SPRING_REDIS_HOST: redis
                  SPRING_REDIS_PORT: 6379
                  JWT_SECRET_KEY: \${JWT_SECRET_KEY}
                networks:
                  - ubuntu_this_network
                restart: always
            
              spring-boot-2:
                <<: *spring-service
                container_name: spring-boot-2
            
              spring-boot-3:
                <<: *spring-service
                container_name: spring-boot-3
            
              redis:
                image: redis:alpine
                container_name: redis_boot
                volumes:
                  - redis:/data
                networks:
                  - ubuntu_this_network
                restart: always
            
            networks:
              ubuntu_this_network:
                external: true
            
            volumes:
              redis:
            EOF
            
            # Create nginx.conf
            cat << EOF > nginx.conf
            events {
              worker_connections 1024;
            }
            
            http {
              upstream spring-app {
                least_conn;
                server spring-boot-1:8080;
                server spring-boot-2:8080;
                server spring-boot-3:8080;
              }
            
              server {
                listen 80;
                server_name ${PUBLIC_IP_V4};
            
                location / {
                  proxy_pass http://spring-app;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                }
              }
            }
            EOF
            
            # Pull the latest images
            docker-compose pull
            
            # Build and start the containers
            docker-compose up -d --build
            
            # Clean up unused images
            docker image prune -f

      - name: Get Current Time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH:mm:ss
          utcOffset: "+09:00"

      - name: Print Current Time
        run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}"
        shell: bash