name: Java CI/CD with Gradle

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  contents: read

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/spring
  API_DOMAIN: api.togerun.shop  # [추가] 도메인 직접 지정
  EMAIL: ${{ secrets.EMAIL }}    # [추가] Let's Encrypt 이메일

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create and verify application.yml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 -d > application.yml
          echo "Created application.yml:"
          cat application.yml

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5

      - name: Grant Execute Permission For Gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build --info

      - name: Create build context
        run: |
          mkdir -p docker-build
          EXEC_JAR=$(find build/libs/ -name "*.jar" -not -name "*plain.jar" -type f)
          
          if [ -z "$EXEC_JAR" ]; then
            echo "Error: No executable JAR file found"
            exit 1
          fi
          
          echo "Found executable JAR: $EXEC_JAR"
          cp "$EXEC_JAR" docker-build/app.jar
          cp Dockerfile docker-build/

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: docker-build
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/spring:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          PUBLIC_IP_V4: ${{ secrets.PUBLIC_IP_V4 }}
          EMAIL: ${{ secrets.EMAIL }}          # [추가] Let's Encrypt 이메일
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}  # [추가] Redis 비밀번호
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          envs: DOCKER_USERNAME,PUBLIC_IP_V4,EMAIL,REDIS_PASSWORD
          script: |
            # [추가] SSL 및 certbot 디렉토리 생성
            mkdir -p certbot/conf
            mkdir -p certbot/www
            mkdir -p ssl
            
            # Create docker-compose.yml
            cat << EOF > docker-compose.yml
            version: '3'
            
            services:
              nginx:
                image: nginx:alpine
                container_name: nginx
                ports:
                  - "80:80"
                  - "443:443"    # [추가] HTTPS 포트
                volumes:
                  - ./nginx.conf:/etc/nginx/nginx.conf:ro
                  - ./ssl:/etc/nginx/ssl:ro  # [추가] SSL 인증서
                  - ./certbot/conf:/etc/letsencrypt    # [추가] Let's Encrypt 설정
                  - ./certbot/www:/var/www/certbot     # [추가] ACME challenge
                depends_on:
                  - spring-boot-1
                  - spring-boot-2
                  - spring-boot-3
                networks:
                  - ubuntu_this_network
                restart: always
            
              # [추가] certbot 서비스
              certbot:
                image: certbot/certbot
                container_name: certbot
                volumes:
                  - ./certbot/conf:/etc/letsencrypt
                  - ./certbot/www:/var/www/certbot
                entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait \$\${!}; done;'"
            
              spring-boot-1: &spring-service
                container_name: spring-boot-1
                image: \${DOCKER_USERNAME}/spring:latest
                expose:
                  - "8080"
                depends_on:
                  - redis
                networks:
                  - ubuntu_this_network
                restart: always
            
              spring-boot-2:
                <<: *spring-service
                container_name: spring-boot-2
            
              spring-boot-3:
                <<: *spring-service
                container_name: spring-boot-3
            
              redis:
                image: redis:alpine
                container_name: redis_boot
                command: redis-server --requirepass "\${REDIS_PASSWORD}"  # [추가] Redis 비밀번호
                volumes:
                  - redis:/data
                networks:
                  - ubuntu_this_network
                restart: always
            
            networks:
              ubuntu_this_network:
                external: true
            
            volumes:
              redis:
            EOF
            
            # [추가] 초기 nginx.conf (HTTP -> HTTPS 리다이렉트)
            cat << EOF > nginx.conf
            events {
              worker_connections 1024;
            }
            
            http {
              upstream spring-app {
                least_conn;
                server spring-boot-1:8080;
                server spring-boot-2:8080;
                server spring-boot-3:8080;
              }
            
              server {
                listen 80;
                listen [::]:80;
                server_name api.togerun.shop;
            
                # [추가] Let's Encrypt ACME Challenge
                location /.well-known/acme-challenge/ {
                    root /var/www/certbot;
                }
            
                location / {
                  return 301 https://\$host\$request_uri;
                }
              }
            }
            EOF
            
            # Docker cleanup
            docker-compose down --remove-orphans
            docker image prune -f
            
            # Create network if not exists
            docker network create ubuntu_this_network || true
            
            # [추가] nginx 먼저 시작 (Let's Encrypt 용)
            docker-compose up -d nginx
            
            # [추가] Let's Encrypt 인증서 발급
            docker-compose run --rm certbot certonly \
              --webroot \
              --webroot-path /var/www/certbot \
              --email \${EMAIL} \
              --agree-tos \
              --no-eff-email \
              -d api.togerun.shop
            
            # [추가] HTTPS 설정이 포함된 최종 nginx.conf
            cat << EOF > nginx.conf
            events {
              worker_connections 1024;
            }
            
            http {
              upstream spring-app {
                least_conn;
                server spring-boot-1:8080;
                server spring-boot-2:8080;
                server spring-boot-3:8080;
              }
            
              # HTTP -> HTTPS 리다이렉트
              server {
                listen 80;
                listen [::]:80;
                server_name api.togerun.shop;
            
                location /.well-known/acme-challenge/ {
                    root /var/www/certbot;
                }
            
                location / {
                  return 301 https://\$host\$request_uri;
                }
              }
            
              # HTTPS 서버
              server {
                listen 443 ssl http2;
                listen [::]:443 ssl http2;
                server_name api.togerun.shop;
            
                # SSL 설정
                ssl_certificate /etc/letsencrypt/live/api.togerun.shop/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/api.togerun.shop/privkey.pem;
            
                # SSL 보안 설정
                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
                ssl_prefer_server_ciphers off;
                ssl_session_cache shared:SSL:10m;
                ssl_session_timeout 10m;
            
                # 보안 헤더
                add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
                add_header X-Frame-Options "SAMEORIGIN";
                add_header X-Content-Type-Options "nosniff";
                add_header X-XSS-Protection "1; mode=block";
            
                # CORS 설정
                add_header 'Access-Control-Allow-Origin' 'https://www.togerun.shop' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                add_header 'Access-Control-Allow-Headers' '*';
                add_header 'Access-Control-Allow-Credentials' 'true';
            
                location / {
                  # OPTIONS 요청 처리
                  if (\$request_method = 'OPTIONS') {
                    add_header 'Access-Control-Allow-Origin' 'https://www.togerun.shop' always;
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                    add_header 'Access-Control-Allow-Headers' '*';
                    add_header 'Access-Control-Allow-Credentials' 'true';
                    add_header 'Content-Type' 'text/plain charset=UTF-8';
                    add_header 'Content-Length' 0;
                    return 204;
                  }

                  proxy_pass http://spring-app;
                  proxy_http_version 1.1;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
            
                  # WebSocket 설정
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection "upgrade";
                }
              }
            }
            EOF
            
            # Pull latest images and restart
            docker-compose pull
            docker-compose up -d

      - name: Get Current Time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH:mm:ss
          utcOffset: "+09:00"

      - name: Print Current Time
        run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}"
        shell: bash