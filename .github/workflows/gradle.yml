name: Java CI/CD with Gradle

# 워크플로우 트리거 설정
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

# 기본 권한 설정
permissions:
  contents: read

# 환경 변수 설정
env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/spring
  API_DOMAIN: api.togerun.shop
  EMAIL: ${{ secrets.EMAIL }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      # Step 1: 소스 코드 체크아웃
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Java 개발 환경 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: application.yml 파일 생성 및 검증
      - name: Create and verify application.yml
        run: |
          mkdir -p ./src/main/resources
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 -d > application.yml
          echo "Created application.yml:"
          cat application.yml

      # Step 4: Gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5

      # Step 5: Gradle 실행 권한 부여
      - name: Grant Execute Permission For Gradlew
        run: chmod +x gradlew

      # Step 6: Gradle 빌드 실행
      - name: Build with Gradle
        run: ./gradlew build --info

      - name: Create build context
        run: |
          mkdir -p docker-build
          EXEC_JAR=$(find build/libs/ -name "*.jar" -not -name "*plain.jar" -type f)
          
          if [ -z "$EXEC_JAR" ]; then
            echo "Error: No executable JAR file found"
            exit 1
          fi
          
          echo "Found executable JAR: $EXEC_JAR"
          cp "$EXEC_JAR" docker-build/app.jar
          cp Dockerfile docker-build/

      # Step 8: DockerHub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 9: Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: docker-build
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/spring:latest

      # Step 10: EC2 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          PUBLIC_IP_V4: ${{ secrets.PUBLIC_IP_V4 }}
          EMAIL: ${{ secrets.EMAIL }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          envs: DOCKER_USERNAME,PUBLIC_IP_V4,EMAIL,REDIS_PASSWORD
          script: |
            # SSL 인증서 관련 디렉토리 생성
            mkdir -p certbot/conf
            mkdir -p certbot/www
            mkdir -p ssl
            
            # Create docker-compose.yml
            cat << EOF > docker-compose.yml
            version: '3'
            
            services:
              nginx:
                image: nginx:alpine
                container_name: nginx
                ports:
                  - "80:80"
                  - "443:443"
                volumes:
                  - ./nginx.conf:/etc/nginx/nginx.conf:ro
                  - ./ssl:/etc/nginx/ssl:ro
                  - ./certbot/conf:/etc/letsencrypt
                  - ./certbot/www:/var/www/certbot
                depends_on:
                  - spring-boot
                networks:
                  - ubuntu_this_network
                restart: always
            
              certbot:
                image: certbot/certbot
                container_name: certbot
                volumes:
                  - ./certbot/conf:/etc/letsencrypt
                  - ./certbot/www:/var/www/certbot
                entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait \$\${!}; done;'"
            
              spring-boot:
                container_name: spring-boot
                image: \${DOCKER_USERNAME}/spring:latest
                expose:
                  - "8080"
                environment:
                  - JAVA_OPTS=-XX:+UseG1GC -Xms256m -Xmx512m
                  - SPRING_PROFILES_ACTIVE=prod
                  - SPRING_DATA_REDIS_HOST=redis
                  - SPRING_DATA_REDIS_PASSWORD=\${REDIS_PASSWORD}
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                depends_on:
                  - redis
                networks:
                  - ubuntu_this_network
                restart: always
            
              redis:
                image: redis:alpine
                container_name: redis_boot
                command: redis-server --requirepass "\${REDIS_PASSWORD}"
                volumes:
                  - redis:/data
                networks:
                  - ubuntu_this_network
                restart: always
            
            networks:
              ubuntu_this_network:
                external: true
            
            volumes:
              redis:
            EOF
            
            # nginx.conf 생성 (HTTPS 설정 포함)
            cat << EOF > nginx.conf
            events {
                worker_connections 1024;
                multi_accept on;
                use epoll;
            }

            http {
                upstream spring-app {
                    server spring-boot:8080;
                    keepalive 32;
                }

                # CORS 설정을 위한 맵
                map \$http_origin \$cors_origin {
                    default "";
                    "https://www.togerun.shop" "\$http_origin";
                    "https://togerun.shop" "\$http_origin";
                    "http://localhost:3000" "\$http_origin";
                }

                server {
                    listen 80;
                    listen [::]:80;
                    server_name api.togerun.shop;

                    location /.well-known/acme-challenge/ {
                        root /var/www/certbot;
                    }

                    location / {
                        return 301 https://\$host\$request_uri;
                    }
                }

                server {
                    listen 443 ssl http2;
                    listen [::]:443 ssl http2;
                    server_name api.togerun.shop;

                    # SSL 설정
                    ssl_certificate /etc/letsencrypt/live/api.togerun.shop/fullchain.pem;
                    ssl_certificate_key /etc/letsencrypt/live/api.togerun.shop/privkey.pem;
                    ssl_protocols TLSv1.2 TLSv1.3;
                    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
                    ssl_prefer_server_ciphers off;
                    ssl_session_cache shared:SSL:10m;
                    ssl_session_timeout 10m;

                    # CORS 프리플라이트 요청을 위한 OPTIONS 처리
                    if (\$request_method = 'OPTIONS') {
                        add_header 'Access-Control-Allow-Origin' \$cors_origin;
                        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                        add_header 'Access-Control-Allow-Headers' 'Authorization, Cache-Control, Content-Type, Accept, Last-Event-ID';
                        add_header 'Access-Control-Allow-Credentials' 'true';
                        add_header 'Access-Control-Max-Age' 3600;
                        add_header 'Content-Type' 'text/plain charset=UTF-8';
                        add_header 'Content-Length' 0;
                        return 204;
                    }

                    location / {
                        # 보안 헤더
                        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
                        add_header X-Frame-Options "SAMEORIGIN" always;
                        add_header X-Content-Type-Options "nosniff" always;
                        add_header X-XSS-Protection "1; mode=block" always;
            
                        # CORS 헤더
                        add_header 'Access-Control-Allow-Origin' \$cors_origin always;
                        add_header 'Access-Control-Allow-Credentials' 'true' always;
                        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
                        add_header 'Access-Control-Allow-Headers' 'Authorization, Cache-Control, Content-Type, Accept, Last-Event-ID' always;

                        # 프록시 설정
                        proxy_pass http://spring-app;
                        proxy_http_version 1.1;
            
                        # 헤더 설정
                        proxy_set_header Host \$host;
                        proxy_set_header X-Real-IP \$remote_addr;
                        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                        proxy_set_header X-Forwarded-Proto \$scheme;
            
                        # WebSocket 지원
                        proxy_set_header Upgrade \$http_upgrade;
                        proxy_set_header Connection "upgrade";

                        # 타임아웃 설정
                        proxy_connect_timeout 300;
                        proxy_send_timeout 300;
                        proxy_read_timeout 300;
                        send_timeout 300;

                        # SSE 설정
                        proxy_buffering off;
                        proxy_cache off;
            
                        # 쿠키 설정
                        proxy_cookie_path / "/; secure; Domain=.togerun.shop";
                    }
                }
            }
            EOF
            
            # 기존 Docker 컨테이너 정리
            docker-compose down --remove-orphans
            docker image prune -f
            
            # Docker 네트워크 생성 (없는 경우)
            docker network create ubuntu_this_network || true
            
            # 최신 이미지 풀 및 서비스 재시작
            docker-compose pull
            docker-compose up -d

      # Step 11: 배포 시간 기록
      - name: Get Current Time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH:mm:ss
          utcOffset: "+09:00"

      - name: Print Current Time
        run: echo "Current Time=${{steps.current-time.outputs.formattedTime}}"
        shell: bash